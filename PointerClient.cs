// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using Qwips.Core.Pointer.SkmXrm;
using Qwips.Core.Pointer.XrmAutomation;
using Qwips.Core.Pointer.XrmAzureAdmin;
using Qwips.Core.Pointer.XrmDb;
using Qwips.Core.Pointer.XrmDbExport;
using Qwips.Core.Pointer.XrmDrive;
using Qwips.Core.Pointer.XrmEmail;
using Qwips.Core.Pointer.XrmPdfgen;
using Qwips.Core.Pointer.XrmSmsc;
using Qwips.Core.Pointer.XrmTenants;
using Qwips.Core.Pointer.XrmUsers;
using Qwips.Core.PointerClientSdk.ErrorHandling;

namespace Qwips.Core.PointerClientSdk
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class PointerClient : BaseRequestBuilder
    {
        /// <summary>The skmXrm property</summary>
        public SkmXrmRequestBuilder SkmXrm
        {
            get =>
            new SkmXrmRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmAutomation property</summary>
        public XrmAutomationRequestBuilder XrmAutomation
        {
            get =>
            new XrmAutomationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmAzureAdmin property</summary>
        public XrmAzureAdminRequestBuilder XrmAzureAdmin
        {
            get =>
            new XrmAzureAdminRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmDb property</summary>
        public XrmDbRequestBuilder XrmDb
        {
            get =>
            new XrmDbRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmDbExport property</summary>
        public XrmDbExportRequestBuilder XrmDbExport
        {
            get =>
            new XrmDbExportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmDrive property</summary>
        public XrmDriveRequestBuilder XrmDrive
        {
            get =>
            new XrmDriveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmEmail property</summary>
        public XrmEmailRequestBuilder XrmEmail
        {
            get =>
            new XrmEmailRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmPdfgen property</summary>
        public XrmPdfgenRequestBuilder XrmPdfgen
        {
            get =>
            new XrmPdfgenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmSmsc property</summary>
        public XrmSmscRequestBuilder XrmSmsc
        {
            get =>
            new XrmSmscRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmTenants property</summary>
        public XrmTenantsRequestBuilder XrmTenants
        {
            get =>
            new XrmTenantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The xrmUsers property</summary>
        public XrmUsersRequestBuilder XrmUsers
        {
            get =>
            new XrmUsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new Pointer and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PointerClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<HtmlParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "/api";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }


}
