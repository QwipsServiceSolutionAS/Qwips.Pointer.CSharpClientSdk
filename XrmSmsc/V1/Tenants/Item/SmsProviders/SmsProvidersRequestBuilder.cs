// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using Qwips.Core.Pointer.XrmSmsc.V1.Tenants.Item.SmsProviders.Item;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace Qwips.Core.Pointer.XrmSmsc.V1.Tenants.Item.SmsProviders {
    /// <summary>
    /// Builds and executes requests for operations under \xrm-smsc\v1\tenants\{tenantId}\smsProviders
    /// </summary>
    public class SmsProvidersRequestBuilder : BaseRequestBuilder {
        /// <summary>Gets an item from the Qwips.Core.Pointer.xrmSmsc.v1.tenants.item.smsProviders.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        public WithIntegrationItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("integrationId", position);
            return new WithIntegrationItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new SmsProvidersRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SmsProvidersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/xrm-smsc/v1/tenants/{tenantId}/smsProviders", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new SmsProvidersRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SmsProvidersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/xrm-smsc/v1/tenants/{tenantId}/smsProviders", rawUrl) {
        }
    }
}
