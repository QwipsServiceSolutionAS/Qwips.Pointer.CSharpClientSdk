// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Qwips.Core.Pointer.Models; 
 using Qwips.Core.PointerClientSdk.ErrorHandling;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
using Microsoft.Kiota.Serialization.Text;
using PointerClientSdk;

namespace Qwips.Core.Pointer.XrmTenants.V1.Login.WhoAmI
{
    /// <summary>
    /// Builds and executes requests for operations under \xrm-tenants\v1\login\whoAmI
    /// </summary>
    public class WhoAmIRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new WhoAmIRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WhoAmIRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/xrm-tenants/v1/login/whoAmI{?key}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new WhoAmIRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WhoAmIRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/xrm-tenants/v1/login/whoAmI{?key}", rawUrl)
        {
        }
        /// <summary>
        /// Get current user info
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<InlineResponse2001?> GetAsync(Action<WhoAmIRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<InlineResponse2001> GetAsync(Action<WhoAmIRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);

            Dictionary<string, ParsableFactory<IParsable>> errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                { "4XX", Pointer4XXHtmlErrorResponse.CreateFromDiscriminatorValue }
            };
            return await RequestAdapter.SendAsync<InlineResponse2001>(requestInfo, InlineResponse2001.CreateFromDiscriminatorValue, errorMapping, cancellationToken);
        }
        /// <summary>
        /// Get current user info
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<WhoAmIRequestBuilderGetRequestConfiguration>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<WhoAmIRequestBuilderGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation
            {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "text/plain");
            if (requestConfiguration != null)
            {
                var requestConfig = new WhoAmIRequestBuilderGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WhoAmIRequestBuilder WithUrl(string rawUrl)
        {
            return new WhoAmIRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class WhoAmIRequestBuilderGetRequestConfiguration
        {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            public KeyQueryParam QueryParameters { get; }


            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>
            /// Instantiates a new whoAmIRequestBuilderGetRequestConfiguration and sets the default values.
            /// </summary>
            public WhoAmIRequestBuilderGetRequestConfiguration()
            {
                Options = new List<IRequestOption>();
                QueryParameters = new KeyQueryParam();
                Headers = new RequestHeaders();
            }
        }
        public class KeyQueryParam
        {
            public string Key { get; set; }
        }
    }
}
