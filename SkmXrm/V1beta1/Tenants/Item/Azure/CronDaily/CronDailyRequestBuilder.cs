// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using Qwips.Core.PointerClientSdk.ErrorHandling;
namespace Qwips.Core.Pointer.SkmXrm.V1beta1.Tenants.Item.Azure.CronDaily
{
    /// <summary>
    /// Builds and executes requests for operations under \skm-xrm\v1beta1\tenants\{tenantId}\azure\cron:daily
    /// </summary>
    public class CronDailyRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new CronDailyRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CronDailyRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/skm-xrm/v1beta1/tenants/{tenantId}/azure/cron:daily{?callback*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new CronDailyRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CronDailyRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/skm-xrm/v1beta1/tenants/{tenantId}/azure/cron:daily{?callback*}", rawUrl) {
        }
        /// <summary>
        /// Tries to renew subscriptions and sync users. To be called daily.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<CronDailyResponse?> PostAsync(Action<CronDailyRequestBuilderPostRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<CronDailyResponse> PostAsync(Action<CronDailyRequestBuilderPostRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<CronDailyResponse>(requestInfo, CronDailyResponse.CreateFromDiscriminatorValue, PointerErrorHandler.GenericErrorResponse, cancellationToken);
        }
        /// <summary>
        /// Tries to renew subscriptions and sync users. To be called daily.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<CronDailyRequestBuilderPostRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<CronDailyRequestBuilderPostRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.POST,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            if (requestConfiguration != null) {
                var requestConfig = new CronDailyRequestBuilderPostRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public CronDailyRequestBuilder WithUrl(string rawUrl) {
            return new CronDailyRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Tries to renew subscriptions and sync users. To be called daily.
        /// </summary>
        public class CronDailyRequestBuilderPostQueryParameters {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? Callback { get; set; }
#nullable restore
#else
            public string Callback { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class CronDailyRequestBuilderPostRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>Request query parameters</summary>
            public CronDailyRequestBuilderPostQueryParameters QueryParameters { get; set; } = new CronDailyRequestBuilderPostQueryParameters();
            /// <summary>
            /// Instantiates a new cronDailyRequestBuilderPostRequestConfiguration and sets the default values.
            /// </summary>
            public CronDailyRequestBuilderPostRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
    }
}
