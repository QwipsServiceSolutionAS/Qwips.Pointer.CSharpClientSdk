// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1MergeItems : IParsable {
        /// <summary>Gets or Sets ContentUrl</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentUrl { get; set; }
#nullable restore
#else
        public string ContentUrl { get; set; }
#endif
        /// <summary>Gets or Sets Disabled</summary>
        public bool? Disabled { get; set; }
        /// <summary>Gets or Sets DriveItemId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DriveItemId { get; set; }
#nullable restore
#else
        public string DriveItemId { get; set; }
#endif
        /// <summary>Gets or Sets Source</summary>
        public Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1MergeItems_plus_SourceEnum? Source { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1MergeItems CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1MergeItems();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"contentUrl", n => { ContentUrl = n.GetStringValue(); } },
                {"disabled", n => { Disabled = n.GetBoolValue(); } },
                {"driveItemId", n => { DriveItemId = n.GetStringValue(); } },
                {"source", n => { Source = n.GetEnumValue<Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1MergeItems_plus_SourceEnum>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("contentUrl", ContentUrl);
            writer.WriteBoolValue("disabled", Disabled);
            writer.WriteStringValue("driveItemId", DriveItemId);
            writer.WriteEnumValue<Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1MergeItems_plus_SourceEnum>("source", Source);
        }
    }
}
