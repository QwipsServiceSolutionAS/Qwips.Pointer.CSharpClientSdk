// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class Body136 : IParsable {
        /// <summary>Gets or Sets Attachments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Xrmemailv1tenantstenantIdemailProvidersintegrationIdsendEmailAttachments>? Attachments { get; set; }
#nullable restore
#else
        public List<Xrmemailv1tenantstenantIdemailProvidersintegrationIdsendEmailAttachments> Attachments { get; set; }
#endif
        /// <summary>Gets or Sets Bcc</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Bcc { get; set; }
#nullable restore
#else
        public List<string> Bcc { get; set; }
#endif
        /// <summary>Gets or Sets Cc</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Cc { get; set; }
#nullable restore
#else
        public List<string> Cc { get; set; }
#endif
        /// <summary>If empty, defaultSendEmailFrom will be used</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? From { get; set; }
#nullable restore
#else
        public string From { get; set; }
#endif
        /// <summary>Gets or Sets HtmlBody</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HtmlBody { get; set; }
#nullable restore
#else
        public string HtmlBody { get; set; }
#endif
        /// <summary>Gets or Sets ReplyTo</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReplyTo { get; set; }
#nullable restore
#else
        public string ReplyTo { get; set; }
#endif
        /// <summary>Gets or Sets Subject</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>Gets or Sets TextBody</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TextBody { get; set; }
#nullable restore
#else
        public string TextBody { get; set; }
#endif
        /// <summary>Gets or Sets To</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? To { get; set; }
#nullable restore
#else
        public List<string> To { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Body136 CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Body136();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"attachments", n => { Attachments = n.GetCollectionOfObjectValues<Xrmemailv1tenantstenantIdemailProvidersintegrationIdsendEmailAttachments>(Xrmemailv1tenantstenantIdemailProvidersintegrationIdsendEmailAttachments.CreateFromDiscriminatorValue)?.ToList(); } },
                {"bcc", n => { Bcc = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"cc", n => { Cc = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"from", n => { From = n.GetStringValue(); } },
                {"htmlBody", n => { HtmlBody = n.GetStringValue(); } },
                {"replyTo", n => { ReplyTo = n.GetStringValue(); } },
                {"subject", n => { Subject = n.GetStringValue(); } },
                {"textBody", n => { TextBody = n.GetStringValue(); } },
                {"to", n => { To = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Xrmemailv1tenantstenantIdemailProvidersintegrationIdsendEmailAttachments>("attachments", Attachments);
            writer.WriteCollectionOfPrimitiveValues<string>("bcc", Bcc);
            writer.WriteCollectionOfPrimitiveValues<string>("cc", Cc);
            writer.WriteStringValue("from", From);
            writer.WriteStringValue("htmlBody", HtmlBody);
            writer.WriteStringValue("replyTo", ReplyTo);
            writer.WriteStringValue("subject", Subject);
            writer.WriteStringValue("textBody", TextBody);
            writer.WriteCollectionOfPrimitiveValues<string>("to", To);
        }
    }
}
