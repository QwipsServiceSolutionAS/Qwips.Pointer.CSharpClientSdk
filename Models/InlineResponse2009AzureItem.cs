// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse2009AzureItem : IParsable {
        /// <summary>Gets or Sets AzureCTag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureCTag { get; set; }
#nullable restore
#else
        public string AzureCTag { get; set; }
#endif
        /// <summary>Gets or Sets AzureDriveId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureDriveId { get; set; }
#nullable restore
#else
        public string AzureDriveId { get; set; }
#endif
        /// <summary>Gets or Sets AzureDriveType</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureDriveType { get; set; }
#nullable restore
#else
        public string AzureDriveType { get; set; }
#endif
        /// <summary>Gets or Sets AzureETag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureETag { get; set; }
#nullable restore
#else
        public string AzureETag { get; set; }
#endif
        /// <summary>Gets or Sets AzureItemId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureItemId { get; set; }
#nullable restore
#else
        public string AzureItemId { get; set; }
#endif
        /// <summary>Gets or Sets AzureName</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureName { get; set; }
#nullable restore
#else
        public string AzureName { get; set; }
#endif
        /// <summary>Gets or Sets AzureParentId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureParentId { get; set; }
#nullable restore
#else
        public string AzureParentId { get; set; }
#endif
        /// <summary>Gets or Sets AzureWebUrl</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureWebUrl { get; set; }
#nullable restore
#else
        public string AzureWebUrl { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse2009AzureItem CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse2009AzureItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"azureCTag", n => { AzureCTag = n.GetStringValue(); } },
                {"azureDriveId", n => { AzureDriveId = n.GetStringValue(); } },
                {"azureDriveType", n => { AzureDriveType = n.GetStringValue(); } },
                {"azureETag", n => { AzureETag = n.GetStringValue(); } },
                {"azureItemId", n => { AzureItemId = n.GetStringValue(); } },
                {"azureName", n => { AzureName = n.GetStringValue(); } },
                {"azureParentId", n => { AzureParentId = n.GetStringValue(); } },
                {"azureWebUrl", n => { AzureWebUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("azureCTag", AzureCTag);
            writer.WriteStringValue("azureDriveId", AzureDriveId);
            writer.WriteStringValue("azureDriveType", AzureDriveType);
            writer.WriteStringValue("azureETag", AzureETag);
            writer.WriteStringValue("azureItemId", AzureItemId);
            writer.WriteStringValue("azureName", AzureName);
            writer.WriteStringValue("azureParentId", AzureParentId);
            writer.WriteStringValue("azureWebUrl", AzureWebUrl);
        }
    }
}
