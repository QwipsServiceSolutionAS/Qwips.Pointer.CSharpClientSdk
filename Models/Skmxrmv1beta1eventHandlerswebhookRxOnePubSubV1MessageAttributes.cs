// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class Skmxrmv1beta1eventHandlerswebhookRxOnePubSubV1MessageAttributes : IParsable {
        /// <summary>Gets or Sets P2EventId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? P2EventId { get; set; }
#nullable restore
#else
        public string P2EventId { get; set; }
#endif
        /// <summary>Gets or Sets P2PayloadType</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? P2PayloadType { get; set; }
#nullable restore
#else
        public string P2PayloadType { get; set; }
#endif
        /// <summary>Gets or Sets P2TenantId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? P2TenantId { get; set; }
#nullable restore
#else
        public string P2TenantId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Skmxrmv1beta1eventHandlerswebhookRxOnePubSubV1MessageAttributes CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Skmxrmv1beta1eventHandlerswebhookRxOnePubSubV1MessageAttributes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"p2EventId", n => { P2EventId = n.GetStringValue(); } },
                {"p2PayloadType", n => { P2PayloadType = n.GetStringValue(); } },
                {"p2TenantId", n => { P2TenantId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("p2EventId", P2EventId);
            writer.WriteStringValue("p2PayloadType", P2PayloadType);
            writer.WriteStringValue("p2TenantId", P2TenantId);
        }
    }
}
