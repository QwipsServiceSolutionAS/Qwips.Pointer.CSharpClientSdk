// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse2002AggsStringBasic1Data : IParsable {
        /// <summary>Gets or Sets C</summary>
        public double? C { get; set; }
        /// <summary>Gets or Sets K</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? K { get; set; }
#nullable restore
#else
        public string K { get; set; }
#endif
        /// <summary>Gets or Sets S</summary>
        public double? S { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse2002AggsStringBasic1Data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse2002AggsStringBasic1Data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"c", n => { C = n.GetDoubleValue(); } },
                {"k", n => { K = n.GetStringValue(); } },
                {"s", n => { S = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("c", C);
            writer.WriteStringValue("k", K);
            writer.WriteDoubleValue("s", S);
        }
    }
}
