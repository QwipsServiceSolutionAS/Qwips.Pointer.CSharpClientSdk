// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class Body9 : IParsable {
        /// <summary>Gets or Sets Currency</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Gets or Sets CustomerContactId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerContactId { get; set; }
#nullable restore
#else
        public string CustomerContactId { get; set; }
#endif
        /// <summary>Gets or Sets CustomerId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>Gets or Sets InvoiceComment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceComment { get; set; }
#nullable restore
#else
        public string InvoiceComment { get; set; }
#endif
        /// <summary>Gets or Sets InvoiceCustomerId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceCustomerId { get; set; }
#nullable restore
#else
        public string InvoiceCustomerId { get; set; }
#endif
        /// <summary>Gets or Sets InvoiceCustomerReference</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceCustomerReference { get; set; }
#nullable restore
#else
        public string InvoiceCustomerReference { get; set; }
#endif
        /// <summary>Gets or Sets InvoiceOurReference</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceOurReference { get; set; }
#nullable restore
#else
        public string InvoiceOurReference { get; set; }
#endif
        /// <summary>Gets or Sets IsArchived</summary>
        public bool? IsArchived { get; set; }
        /// <summary>Gets or Sets Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Gets or Sets No</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? No { get; set; }
#nullable restore
#else
        public string No { get; set; }
#endif
        /// <summary>Gets or Sets OrderLines</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<InlineResponse20016OrderLines>? OrderLines { get; set; }
#nullable restore
#else
        public List<InlineResponse20016OrderLines> OrderLines { get; set; }
#endif
        /// <summary>Gets or Sets OurContactId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OurContactId { get; set; }
#nullable restore
#else
        public string OurContactId { get; set; }
#endif
        /// <summary>Gets or Sets PersistedPdfGenOptions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Body9_persistedPdfGenOptions? PersistedPdfGenOptions { get; set; }
#nullable restore
#else
        public Body9_persistedPdfGenOptions PersistedPdfGenOptions { get; set; }
#endif
        /// <summary>Gets or Sets ProjectId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>Gets or Sets Rowrels</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<InlineResponse2002Rowrels>? Rowrels { get; set; }
#nullable restore
#else
        public List<InlineResponse2002Rowrels> Rowrels { get; set; }
#endif
        /// <summary>Gets or Sets SalesQuoteId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SalesQuoteId { get; set; }
#nullable restore
#else
        public string SalesQuoteId { get; set; }
#endif
        /// <summary>Gets or Sets SubscriptionBeginAt</summary>
        public DateTimeOffset? SubscriptionBeginAt { get; set; }
        /// <summary>Gets or Sets SubscriptionEndAt</summary>
        public DateTimeOffset? SubscriptionEndAt { get; set; }
        /// <summary>Gets or Sets SubscriptionEndRegisteredAt</summary>
        public DateTimeOffset? SubscriptionEndRegisteredAt { get; set; }
        /// <summary>Gets or Sets SubscriptionExecutedAt</summary>
        public DateTimeOffset? SubscriptionExecutedAt { get; set; }
        /// <summary>Gets or Sets SubscriptionNextExecutionAt</summary>
        public DateTimeOffset? SubscriptionNextExecutionAt { get; set; }
        /// <summary>Gets or Sets SubscriptionPeriodCount</summary>
        public int? SubscriptionPeriodCount { get; set; }
        /// <summary>Gets or Sets SubscriptionPeriodType</summary>
        public Body9_plus_SubscriptionPeriodTypeEnum? SubscriptionPeriodType { get; set; }
        /// <summary>Gets or Sets SubscriptionStatus</summary>
        public Body9_plus_SubscriptionStatusEnum? SubscriptionStatus { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Body9 CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Body9();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"currency", n => { Currency = n.GetStringValue(); } },
                {"customerContactId", n => { CustomerContactId = n.GetStringValue(); } },
                {"customerId", n => { CustomerId = n.GetStringValue(); } },
                {"invoiceComment", n => { InvoiceComment = n.GetStringValue(); } },
                {"invoiceCustomerId", n => { InvoiceCustomerId = n.GetStringValue(); } },
                {"invoiceCustomerReference", n => { InvoiceCustomerReference = n.GetStringValue(); } },
                {"invoiceOurReference", n => { InvoiceOurReference = n.GetStringValue(); } },
                {"isArchived", n => { IsArchived = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"no", n => { No = n.GetStringValue(); } },
                {"orderLines", n => { OrderLines = n.GetCollectionOfObjectValues<InlineResponse20016OrderLines>(InlineResponse20016OrderLines.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ourContactId", n => { OurContactId = n.GetStringValue(); } },
                {"persistedPdfGenOptions", n => { PersistedPdfGenOptions = n.GetObjectValue<Body9_persistedPdfGenOptions>(Body9_persistedPdfGenOptions.CreateFromDiscriminatorValue); } },
                {"projectId", n => { ProjectId = n.GetStringValue(); } },
                {"rowrels", n => { Rowrels = n.GetCollectionOfObjectValues<InlineResponse2002Rowrels>(InlineResponse2002Rowrels.CreateFromDiscriminatorValue)?.ToList(); } },
                {"salesQuoteId", n => { SalesQuoteId = n.GetStringValue(); } },
                {"subscriptionBeginAt", n => { SubscriptionBeginAt = n.GetDateTimeOffsetValue(); } },
                {"subscriptionEndAt", n => { SubscriptionEndAt = n.GetDateTimeOffsetValue(); } },
                {"subscriptionEndRegisteredAt", n => { SubscriptionEndRegisteredAt = n.GetDateTimeOffsetValue(); } },
                {"subscriptionExecutedAt", n => { SubscriptionExecutedAt = n.GetDateTimeOffsetValue(); } },
                {"subscriptionNextExecutionAt", n => { SubscriptionNextExecutionAt = n.GetDateTimeOffsetValue(); } },
                {"subscriptionPeriodCount", n => { SubscriptionPeriodCount = n.GetIntValue(); } },
                {"subscriptionPeriodType", n => { SubscriptionPeriodType = n.GetEnumValue<Body9_plus_SubscriptionPeriodTypeEnum>(); } },
                {"subscriptionStatus", n => { SubscriptionStatus = n.GetEnumValue<Body9_plus_SubscriptionStatusEnum>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("customerContactId", CustomerContactId);
            writer.WriteStringValue("customerId", CustomerId);
            writer.WriteStringValue("invoiceComment", InvoiceComment);
            writer.WriteStringValue("invoiceCustomerId", InvoiceCustomerId);
            writer.WriteStringValue("invoiceCustomerReference", InvoiceCustomerReference);
            writer.WriteStringValue("invoiceOurReference", InvoiceOurReference);
            writer.WriteBoolValue("isArchived", IsArchived);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("no", No);
            writer.WriteCollectionOfObjectValues<InlineResponse20016OrderLines>("orderLines", OrderLines);
            writer.WriteStringValue("ourContactId", OurContactId);
            writer.WriteObjectValue<Body9_persistedPdfGenOptions>("persistedPdfGenOptions", PersistedPdfGenOptions);
            writer.WriteStringValue("projectId", ProjectId);
            writer.WriteCollectionOfObjectValues<InlineResponse2002Rowrels>("rowrels", Rowrels);
            writer.WriteStringValue("salesQuoteId", SalesQuoteId);
            writer.WriteDateTimeOffsetValue("subscriptionBeginAt", SubscriptionBeginAt);
            writer.WriteDateTimeOffsetValue("subscriptionEndAt", SubscriptionEndAt);
            writer.WriteDateTimeOffsetValue("subscriptionEndRegisteredAt", SubscriptionEndRegisteredAt);
            writer.WriteDateTimeOffsetValue("subscriptionExecutedAt", SubscriptionExecutedAt);
            writer.WriteDateTimeOffsetValue("subscriptionNextExecutionAt", SubscriptionNextExecutionAt);
            writer.WriteIntValue("subscriptionPeriodCount", SubscriptionPeriodCount);
            writer.WriteEnumValue<Body9_plus_SubscriptionPeriodTypeEnum>("subscriptionPeriodType", SubscriptionPeriodType);
            writer.WriteEnumValue<Body9_plus_SubscriptionStatusEnum>("subscriptionStatus", SubscriptionStatus);
        }
    }
}
