// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse20016Summary : IParsable {
        /// <summary>Gets or Sets TotalExVat</summary>
        public double? TotalExVat { get; set; }
        /// <summary>Gets or Sets TotalIncVat</summary>
        public double? TotalIncVat { get; set; }
        /// <summary>Gets or Sets TotalVat</summary>
        public double? TotalVat { get; set; }
        /// <summary>Gets or Sets UnitPriceDiscounted</summary>
        public double? UnitPriceDiscounted { get; set; }
        /// <summary>Gets or Sets UnitPriceDiscountedIncVat</summary>
        public double? UnitPriceDiscountedIncVat { get; set; }
        /// <summary>Gets or Sets UnitPriceSurcharged</summary>
        public double? UnitPriceSurcharged { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse20016Summary CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse20016Summary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"totalExVat", n => { TotalExVat = n.GetDoubleValue(); } },
                {"totalIncVat", n => { TotalIncVat = n.GetDoubleValue(); } },
                {"totalVat", n => { TotalVat = n.GetDoubleValue(); } },
                {"unitPriceDiscounted", n => { UnitPriceDiscounted = n.GetDoubleValue(); } },
                {"unitPriceDiscountedIncVat", n => { UnitPriceDiscountedIncVat = n.GetDoubleValue(); } },
                {"unitPriceSurcharged", n => { UnitPriceSurcharged = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("totalExVat", TotalExVat);
            writer.WriteDoubleValue("totalIncVat", TotalIncVat);
            writer.WriteDoubleValue("totalVat", TotalVat);
            writer.WriteDoubleValue("unitPriceDiscounted", UnitPriceDiscounted);
            writer.WriteDoubleValue("unitPriceDiscountedIncVat", UnitPriceDiscountedIncVat);
            writer.WriteDoubleValue("unitPriceSurcharged", UnitPriceSurcharged);
        }
    }
}
