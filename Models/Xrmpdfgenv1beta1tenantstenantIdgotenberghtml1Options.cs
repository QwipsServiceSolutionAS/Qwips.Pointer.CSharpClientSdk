// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1Options : IParsable {
        /// <summary>Gets or Sets Landscape</summary>
        public bool? Landscape { get; set; }
        /// <summary>Gets or Sets MarginBottom</summary>
        public double? MarginBottom { get; set; }
        /// <summary>Gets or Sets MarginLeft</summary>
        public double? MarginLeft { get; set; }
        /// <summary>Gets or Sets MarginRight</summary>
        public double? MarginRight { get; set; }
        /// <summary>Gets or Sets MarginTop</summary>
        public double? MarginTop { get; set; }
        /// <summary>Gets or Sets PageRanges</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PageRanges { get; set; }
#nullable restore
#else
        public string PageRanges { get; set; }
#endif
        /// <summary>Gets or Sets PaperHeight</summary>
        public double? PaperHeight { get; set; }
        /// <summary>Gets or Sets PaperWidth</summary>
        public double? PaperWidth { get; set; }
        /// <summary>Gets or Sets Scale</summary>
        public double? Scale { get; set; }
        /// <summary>Gets or Sets WaitDelay</summary>
        public double? WaitDelay { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1Options CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Xrmpdfgenv1beta1tenantstenantIdgotenberghtml1Options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"landscape", n => { Landscape = n.GetBoolValue(); } },
                {"marginBottom", n => { MarginBottom = n.GetDoubleValue(); } },
                {"marginLeft", n => { MarginLeft = n.GetDoubleValue(); } },
                {"marginRight", n => { MarginRight = n.GetDoubleValue(); } },
                {"marginTop", n => { MarginTop = n.GetDoubleValue(); } },
                {"pageRanges", n => { PageRanges = n.GetStringValue(); } },
                {"paperHeight", n => { PaperHeight = n.GetDoubleValue(); } },
                {"paperWidth", n => { PaperWidth = n.GetDoubleValue(); } },
                {"scale", n => { Scale = n.GetDoubleValue(); } },
                {"waitDelay", n => { WaitDelay = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("landscape", Landscape);
            writer.WriteDoubleValue("marginBottom", MarginBottom);
            writer.WriteDoubleValue("marginLeft", MarginLeft);
            writer.WriteDoubleValue("marginRight", MarginRight);
            writer.WriteDoubleValue("marginTop", MarginTop);
            writer.WriteStringValue("pageRanges", PageRanges);
            writer.WriteDoubleValue("paperHeight", PaperHeight);
            writer.WriteDoubleValue("paperWidth", PaperWidth);
            writer.WriteDoubleValue("scale", Scale);
            writer.WriteDoubleValue("waitDelay", WaitDelay);
        }
    }
}
