// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
using Microsoft.Kiota.Abstractions;

namespace Qwips.Core.Pointer.Models {
    public class InlineResponse2001 : IParsable {
        /// <summary>Gets or Sets DefaultTenantId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultTenantId { get; set; }
#nullable restore
#else
        public string DefaultTenantId { get; set; }
#endif
        /// <summary>Gets or Sets Identities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<InlineResponse2001Identities>? Identities { get; set; }
#nullable restore
#else
        public List<InlineResponse2001Identities> Identities { get; set; }
#endif
        /// <summary>Gets or Sets PrimaryTenantId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryTenantId { get; set; }
#nullable restore
#else
        public string PrimaryTenantId { get; set; }
#endif
        /// <summary>The primaryTenantMeta property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public InlineResponse200PrimaryTenantMeta? PrimaryTenantMeta { get; set; }
#nullable restore
#else
        public InlineResponse200PrimaryTenantMeta PrimaryTenantMeta { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse2001 CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse2001();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"defaultTenantId", n => { DefaultTenantId = n.GetStringValue(); } },
                {"identities", n => { Identities = n.GetCollectionOfObjectValues<InlineResponse2001Identities>(InlineResponse2001Identities.CreateFromDiscriminatorValue)?.ToList(); } },
                {"primaryTenantId", n => { PrimaryTenantId = n.GetStringValue(); } },
                {"primaryTenantMeta", n => { PrimaryTenantMeta = n.GetObjectValue<InlineResponse200PrimaryTenantMeta>(InlineResponse200PrimaryTenantMeta.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("defaultTenantId", DefaultTenantId);
            writer.WriteCollectionOfObjectValues<InlineResponse2001Identities>("identities", Identities);
            writer.WriteStringValue("primaryTenantId", PrimaryTenantId);
            writer.WriteObjectValue<InlineResponse200PrimaryTenantMeta>("primaryTenantMeta", PrimaryTenantMeta);
        }

    }
    public class Pointer4XXErrorResponse : Exception, IParsable
    {
        public string Content { get;  set; }

        public static Pointer4XXErrorResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Pointer4XXErrorResponse();
        }
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>> {
                {"Content", n => { Content = n.GetStringValue(); } },
            };
        }

        public void Serialize(ISerializationWriter writer)
        {
            throw new NotImplementedException();
        }
    }
}
