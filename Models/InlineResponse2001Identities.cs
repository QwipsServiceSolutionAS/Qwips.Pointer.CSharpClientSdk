// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse2001Identities : IParsable {
        /// <summary>The contact property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public InlineResponse2001Contact? Contact { get; set; }
#nullable restore
#else
        public InlineResponse2001Contact Contact { get; set; }
#endif
        /// <summary>Gets or Sets ContactEntityType</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactEntityType { get; set; }
#nullable restore
#else
        public string ContactEntityType { get; set; }
#endif
        /// <summary>Gets or Sets ContactId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactId { get; set; }
#nullable restore
#else
        public string ContactId { get; set; }
#endif
        /// <summary>Gets or Sets PortalScopes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PortalScopes { get; set; }
#nullable restore
#else
        public List<string> PortalScopes { get; set; }
#endif
        /// <summary>Gets or Sets TenantId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId { get; set; }
#nullable restore
#else
        public string TenantId { get; set; }
#endif
        /// <summary>Gets or Sets TenantName</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantName { get; set; }
#nullable restore
#else
        public string TenantName { get; set; }
#endif
        /// <summary>Gets or Sets TenantTags</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TenantTags { get; set; }
#nullable restore
#else
        public List<string> TenantTags { get; set; }
#endif
        /// <summary>Gets or Sets TenantUserId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantUserId { get; set; }
#nullable restore
#else
        public string TenantUserId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse2001Identities CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse2001Identities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"contact", n => { Contact = n.GetObjectValue<InlineResponse2001Contact>(InlineResponse2001Contact.CreateFromDiscriminatorValue); } },
                {"contactEntityType", n => { ContactEntityType = n.GetStringValue(); } },
                {"contactId", n => { ContactId = n.GetStringValue(); } },
                {"portalScopes", n => { PortalScopes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"tenantId", n => { TenantId = n.GetStringValue(); } },
                {"tenantName", n => { TenantName = n.GetStringValue(); } },
                {"tenantTags", n => { TenantTags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"tenantUserId", n => { TenantUserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<InlineResponse2001Contact>("contact", Contact);
            writer.WriteStringValue("contactEntityType", ContactEntityType);
            writer.WriteStringValue("contactId", ContactId);
            writer.WriteCollectionOfPrimitiveValues<string>("portalScopes", PortalScopes);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteStringValue("tenantName", TenantName);
            writer.WriteCollectionOfPrimitiveValues<string>("tenantTags", TenantTags);
            writer.WriteStringValue("tenantUserId", TenantUserId);
        }
    }
}
