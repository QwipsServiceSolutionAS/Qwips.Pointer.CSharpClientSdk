// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class Xrmdbexportv1tenantstenantIdexportToExcelSheets : IParsable {
        /// <summary>Gets or Sets SheetColumns</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Xrmdbexportv1tenantstenantIdexportToExcelSheetColumns>? SheetColumns { get; set; }
#nullable restore
#else
        public List<Xrmdbexportv1tenantstenantIdexportToExcelSheetColumns> SheetColumns { get; set; }
#endif
        /// <summary>Gets or Sets SheetLabel</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SheetLabel { get; set; }
#nullable restore
#else
        public string SheetLabel { get; set; }
#endif
        /// <summary>Gets or Sets SheetRows</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Xrmdbexportv1tenantstenantIdexportToExcelSheets_sheetRows>? SheetRows { get; set; }
#nullable restore
#else
        public List<Xrmdbexportv1tenantstenantIdexportToExcelSheets_sheetRows> SheetRows { get; set; }
#endif
        /// <summary>Gets or Sets Timezone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Xrmdbexportv1tenantstenantIdexportToExcelSheets CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Xrmdbexportv1tenantstenantIdexportToExcelSheets();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"sheetColumns", n => { SheetColumns = n.GetCollectionOfObjectValues<Xrmdbexportv1tenantstenantIdexportToExcelSheetColumns>(Xrmdbexportv1tenantstenantIdexportToExcelSheetColumns.CreateFromDiscriminatorValue)?.ToList(); } },
                {"sheetLabel", n => { SheetLabel = n.GetStringValue(); } },
                {"sheetRows", n => { SheetRows = n.GetCollectionOfObjectValues<Xrmdbexportv1tenantstenantIdexportToExcelSheets_sheetRows>(Xrmdbexportv1tenantstenantIdexportToExcelSheets_sheetRows.CreateFromDiscriminatorValue)?.ToList(); } },
                {"timezone", n => { Timezone = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Xrmdbexportv1tenantstenantIdexportToExcelSheetColumns>("sheetColumns", SheetColumns);
            writer.WriteStringValue("sheetLabel", SheetLabel);
            writer.WriteCollectionOfObjectValues<Xrmdbexportv1tenantstenantIdexportToExcelSheets_sheetRows>("sheetRows", SheetRows);
            writer.WriteStringValue("timezone", Timezone);
        }
    }
}
