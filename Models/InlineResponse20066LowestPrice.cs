// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse20066LowestPrice : IParsable {
        /// <summary>Gets or Sets IsPriceListItem</summary>
        public bool? IsPriceListItem { get; set; }
        /// <summary>Gets or Sets MinimumQuantity</summary>
        public double? MinimumQuantity { get; set; }
        /// <summary>Gets or Sets Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Gets or Sets Price</summary>
        public double? Price { get; set; }
        /// <summary>Gets or Sets PriceListEntryId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PriceListEntryId { get; set; }
#nullable restore
#else
        public string PriceListEntryId { get; set; }
#endif
        /// <summary>Gets or Sets PriceListId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PriceListId { get; set; }
#nullable restore
#else
        public string PriceListId { get; set; }
#endif
        /// <summary>Gets or Sets PriceListName</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PriceListName { get; set; }
#nullable restore
#else
        public string PriceListName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse20066LowestPrice CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse20066LowestPrice();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"isPriceListItem", n => { IsPriceListItem = n.GetBoolValue(); } },
                {"minimumQuantity", n => { MinimumQuantity = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"price", n => { Price = n.GetDoubleValue(); } },
                {"priceListEntryId", n => { PriceListEntryId = n.GetStringValue(); } },
                {"priceListId", n => { PriceListId = n.GetStringValue(); } },
                {"priceListName", n => { PriceListName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("isPriceListItem", IsPriceListItem);
            writer.WriteDoubleValue("minimumQuantity", MinimumQuantity);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("price", Price);
            writer.WriteStringValue("priceListEntryId", PriceListEntryId);
            writer.WriteStringValue("priceListId", PriceListId);
            writer.WriteStringValue("priceListName", PriceListName);
        }
    }
}
