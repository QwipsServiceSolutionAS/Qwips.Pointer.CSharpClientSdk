// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse20063Quota : IParsable {
        /// <summary>Gets or Sets Deleted</summary>
        public double? Deleted { get; set; }
        /// <summary>Gets or Sets Remaining</summary>
        public double? Remaining { get; set; }
        /// <summary>Gets or Sets State</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>Gets or Sets Total</summary>
        public double? Total { get; set; }
        /// <summary>Gets or Sets Used</summary>
        public double? Used { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse20063Quota CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse20063Quota();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"deleted", n => { Deleted = n.GetDoubleValue(); } },
                {"remaining", n => { Remaining = n.GetDoubleValue(); } },
                {"state", n => { State = n.GetStringValue(); } },
                {"total", n => { Total = n.GetDoubleValue(); } },
                {"used", n => { Used = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("deleted", Deleted);
            writer.WriteDoubleValue("remaining", Remaining);
            writer.WriteStringValue("state", State);
            writer.WriteDoubleValue("total", Total);
            writer.WriteDoubleValue("used", Used);
        }
    }
}
