// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse200Options : IParsable {
        /// <summary>Gets or Sets ApiKey</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; set; }
#nullable restore
#else
        public string ApiKey { get; set; }
#endif
        /// <summary>Gets or Sets AppId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId { get; set; }
#nullable restore
#else
        public string AppId { get; set; }
#endif
        /// <summary>Gets or Sets AuthDomain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthDomain { get; set; }
#nullable restore
#else
        public string AuthDomain { get; set; }
#endif
        /// <summary>Gets or Sets DatabaseURL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DatabaseURL { get; set; }
#nullable restore
#else
        public string DatabaseURL { get; set; }
#endif
        /// <summary>Gets or Sets MeasurementId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeasurementId { get; set; }
#nullable restore
#else
        public string MeasurementId { get; set; }
#endif
        /// <summary>Gets or Sets MessagingSenderId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessagingSenderId { get; set; }
#nullable restore
#else
        public string MessagingSenderId { get; set; }
#endif
        /// <summary>Gets or Sets ProjectId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>Gets or Sets StorageBucket</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StorageBucket { get; set; }
#nullable restore
#else
        public string StorageBucket { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse200Options CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse200Options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"apiKey", n => { ApiKey = n.GetStringValue(); } },
                {"appId", n => { AppId = n.GetStringValue(); } },
                {"authDomain", n => { AuthDomain = n.GetStringValue(); } },
                {"databaseURL", n => { DatabaseURL = n.GetStringValue(); } },
                {"measurementId", n => { MeasurementId = n.GetStringValue(); } },
                {"messagingSenderId", n => { MessagingSenderId = n.GetStringValue(); } },
                {"projectId", n => { ProjectId = n.GetStringValue(); } },
                {"storageBucket", n => { StorageBucket = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apiKey", ApiKey);
            writer.WriteStringValue("appId", AppId);
            writer.WriteStringValue("authDomain", AuthDomain);
            writer.WriteStringValue("databaseURL", DatabaseURL);
            writer.WriteStringValue("measurementId", MeasurementId);
            writer.WriteStringValue("messagingSenderId", MessagingSenderId);
            writer.WriteStringValue("projectId", ProjectId);
            writer.WriteStringValue("storageBucket", StorageBucket);
        }
    }
}
