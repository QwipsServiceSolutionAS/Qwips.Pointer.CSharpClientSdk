// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse20046SmsProviderConfig : IParsable {
        /// <summary>Gets or Sets ApiPassword</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiPassword { get; set; }
#nullable restore
#else
        public string ApiPassword { get; set; }
#endif
        /// <summary>Gets or Sets ApiPasswordEncrypted</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public InlineResponse20046SmsProviderConfig_apiPasswordEncrypted? ApiPasswordEncrypted { get; set; }
#nullable restore
#else
        public InlineResponse20046SmsProviderConfig_apiPasswordEncrypted ApiPasswordEncrypted { get; set; }
#endif
        /// <summary>Gets or Sets ApiUsername</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiUsername { get; set; }
#nullable restore
#else
        public string ApiUsername { get; set; }
#endif
        /// <summary>Gets or Sets ProviderNo</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderNo { get; set; }
#nullable restore
#else
        public string ProviderNo { get; set; }
#endif
        /// <summary>Gets or Sets SendSmsFrom</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SendSmsFrom { get; set; }
#nullable restore
#else
        public string SendSmsFrom { get; set; }
#endif
        /// <summary>Gets or Sets SendSmsUrlConfirmedAt</summary>
        public DateTimeOffset? SendSmsUrlConfirmedAt { get; set; }
        /// <summary>Gets or Sets SendSmsUrlTpl</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SendSmsUrlTpl { get; set; }
#nullable restore
#else
        public string SendSmsUrlTpl { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse20046SmsProviderConfig CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse20046SmsProviderConfig();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"apiPassword", n => { ApiPassword = n.GetStringValue(); } },
                {"apiPasswordEncrypted", n => { ApiPasswordEncrypted = n.GetObjectValue<InlineResponse20046SmsProviderConfig_apiPasswordEncrypted>(InlineResponse20046SmsProviderConfig_apiPasswordEncrypted.CreateFromDiscriminatorValue); } },
                {"apiUsername", n => { ApiUsername = n.GetStringValue(); } },
                {"providerNo", n => { ProviderNo = n.GetStringValue(); } },
                {"sendSmsFrom", n => { SendSmsFrom = n.GetStringValue(); } },
                {"sendSmsUrlConfirmedAt", n => { SendSmsUrlConfirmedAt = n.GetDateTimeOffsetValue(); } },
                {"sendSmsUrlTpl", n => { SendSmsUrlTpl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apiPassword", ApiPassword);
            writer.WriteObjectValue<InlineResponse20046SmsProviderConfig_apiPasswordEncrypted>("apiPasswordEncrypted", ApiPasswordEncrypted);
            writer.WriteStringValue("apiUsername", ApiUsername);
            writer.WriteStringValue("providerNo", ProviderNo);
            writer.WriteStringValue("sendSmsFrom", SendSmsFrom);
            writer.WriteDateTimeOffsetValue("sendSmsUrlConfirmedAt", SendSmsUrlConfirmedAt);
            writer.WriteStringValue("sendSmsUrlTpl", SendSmsUrlTpl);
        }
    }
}
