// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class Xrmdbv1beta1tenantstenantIddriveItemscreateUploadFiles : IParsable {
        /// <summary>Gets or Sets ConflictBehavior</summary>
        public Xrmdbv1beta1tenantstenantIddriveItemscreateUploadFiles_plus_ConflictBehaviorEnum? ConflictBehavior { get; set; }
        /// <summary>Gets or Sets FileCreatedAt</summary>
        public DateTimeOffset? FileCreatedAt { get; set; }
        /// <summary>Gets or Sets FileUpdatedAt</summary>
        public DateTimeOffset? FileUpdatedAt { get; set; }
        /// <summary>Gets or Sets MimeType</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MimeType { get; set; }
#nullable restore
#else
        public string MimeType { get; set; }
#endif
        /// <summary>Gets or Sets Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Gets or Sets RelativePath</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RelativePath { get; set; }
#nullable restore
#else
        public string RelativePath { get; set; }
#endif
        /// <summary>Gets or Sets SizeBytes</summary>
        public int? SizeBytes { get; set; }
        /// <summary>Gets or Sets TargetEntityRowId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetEntityRowId { get; set; }
#nullable restore
#else
        public string TargetEntityRowId { get; set; }
#endif
        /// <summary>Gets or Sets TargetEntityType</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetEntityType { get; set; }
#nullable restore
#else
        public string TargetEntityType { get; set; }
#endif
        /// <summary>Gets or Sets UploadOriginalName</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UploadOriginalName { get; set; }
#nullable restore
#else
        public string UploadOriginalName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Xrmdbv1beta1tenantstenantIddriveItemscreateUploadFiles CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Xrmdbv1beta1tenantstenantIddriveItemscreateUploadFiles();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"conflictBehavior", n => { ConflictBehavior = n.GetEnumValue<Xrmdbv1beta1tenantstenantIddriveItemscreateUploadFiles_plus_ConflictBehaviorEnum>(); } },
                {"fileCreatedAt", n => { FileCreatedAt = n.GetDateTimeOffsetValue(); } },
                {"fileUpdatedAt", n => { FileUpdatedAt = n.GetDateTimeOffsetValue(); } },
                {"mimeType", n => { MimeType = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"relativePath", n => { RelativePath = n.GetStringValue(); } },
                {"sizeBytes", n => { SizeBytes = n.GetIntValue(); } },
                {"targetEntityRowId", n => { TargetEntityRowId = n.GetStringValue(); } },
                {"targetEntityType", n => { TargetEntityType = n.GetStringValue(); } },
                {"uploadOriginalName", n => { UploadOriginalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<Xrmdbv1beta1tenantstenantIddriveItemscreateUploadFiles_plus_ConflictBehaviorEnum>("conflictBehavior", ConflictBehavior);
            writer.WriteDateTimeOffsetValue("fileCreatedAt", FileCreatedAt);
            writer.WriteDateTimeOffsetValue("fileUpdatedAt", FileUpdatedAt);
            writer.WriteStringValue("mimeType", MimeType);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("relativePath", RelativePath);
            writer.WriteIntValue("sizeBytes", SizeBytes);
            writer.WriteStringValue("targetEntityRowId", TargetEntityRowId);
            writer.WriteStringValue("targetEntityType", TargetEntityType);
            writer.WriteStringValue("uploadOriginalName", UploadOriginalName);
        }
    }
}
