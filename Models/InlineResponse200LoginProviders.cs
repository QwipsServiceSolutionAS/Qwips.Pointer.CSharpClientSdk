// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse200LoginProviders : IParsable {
        /// <summary>Gets or Sets ComponentId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ComponentId { get; set; }
#nullable restore
#else
        public string ComponentId { get; set; }
#endif
        /// <summary>Gets or Sets IsEnabled</summary>
        public bool? IsEnabled { get; set; }
        /// <summary>Gets or Sets ProviderCustomParams</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<InlineResponse200ProviderCustomParams>? ProviderCustomParams { get; set; }
#nullable restore
#else
        public List<InlineResponse200ProviderCustomParams> ProviderCustomParams { get; set; }
#endif
        /// <summary>Gets or Sets ProviderId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderId { get; set; }
#nullable restore
#else
        public string ProviderId { get; set; }
#endif
        /// <summary>Gets or Sets ProviderScopes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProviderScopes { get; set; }
#nullable restore
#else
        public List<string> ProviderScopes { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse200LoginProviders CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse200LoginProviders();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"componentId", n => { ComponentId = n.GetStringValue(); } },
                {"isEnabled", n => { IsEnabled = n.GetBoolValue(); } },
                {"providerCustomParams", n => { ProviderCustomParams = n.GetCollectionOfObjectValues<InlineResponse200ProviderCustomParams>(InlineResponse200ProviderCustomParams.CreateFromDiscriminatorValue)?.ToList(); } },
                {"providerId", n => { ProviderId = n.GetStringValue(); } },
                {"providerScopes", n => { ProviderScopes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("componentId", ComponentId);
            writer.WriteBoolValue("isEnabled", IsEnabled);
            writer.WriteCollectionOfObjectValues<InlineResponse200ProviderCustomParams>("providerCustomParams", ProviderCustomParams);
            writer.WriteStringValue("providerId", ProviderId);
            writer.WriteCollectionOfPrimitiveValues<string>("providerScopes", ProviderScopes);
        }
    }
}
