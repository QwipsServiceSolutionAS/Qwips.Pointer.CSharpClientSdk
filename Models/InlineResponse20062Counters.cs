// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse20062Counters : IParsable {
        /// <summary>Gets or Sets DeletedCount</summary>
        public double? DeletedCount { get; set; }
        /// <summary>Gets or Sets DriveCount</summary>
        public double? DriveCount { get; set; }
        /// <summary>Gets or Sets FileCount</summary>
        public double? FileCount { get; set; }
        /// <summary>Gets or Sets FileSize</summary>
        public double? FileSize { get; set; }
        /// <summary>Gets or Sets FolderCount</summary>
        public double? FolderCount { get; set; }
        /// <summary>Gets or Sets GraphRequestCount</summary>
        public double? GraphRequestCount { get; set; }
        /// <summary>Gets or Sets IgnoredOutOfRelativeRoot</summary>
        public double? IgnoredOutOfRelativeRoot { get; set; }
        /// <summary>Gets or Sets InsertedCount</summary>
        public double? InsertedCount { get; set; }
        /// <summary>Gets or Sets MatchedCount</summary>
        public double? MatchedCount { get; set; }
        /// <summary>Gets or Sets ModifiedCount</summary>
        public double? ModifiedCount { get; set; }
        /// <summary>Gets or Sets TotalCount</summary>
        public double? TotalCount { get; set; }
        /// <summary>Gets or Sets UpsertedCount</summary>
        public double? UpsertedCount { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse20062Counters CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse20062Counters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"deletedCount", n => { DeletedCount = n.GetDoubleValue(); } },
                {"driveCount", n => { DriveCount = n.GetDoubleValue(); } },
                {"fileCount", n => { FileCount = n.GetDoubleValue(); } },
                {"fileSize", n => { FileSize = n.GetDoubleValue(); } },
                {"folderCount", n => { FolderCount = n.GetDoubleValue(); } },
                {"graphRequestCount", n => { GraphRequestCount = n.GetDoubleValue(); } },
                {"ignoredOutOfRelativeRoot", n => { IgnoredOutOfRelativeRoot = n.GetDoubleValue(); } },
                {"insertedCount", n => { InsertedCount = n.GetDoubleValue(); } },
                {"matchedCount", n => { MatchedCount = n.GetDoubleValue(); } },
                {"modifiedCount", n => { ModifiedCount = n.GetDoubleValue(); } },
                {"totalCount", n => { TotalCount = n.GetDoubleValue(); } },
                {"upsertedCount", n => { UpsertedCount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("deletedCount", DeletedCount);
            writer.WriteDoubleValue("driveCount", DriveCount);
            writer.WriteDoubleValue("fileCount", FileCount);
            writer.WriteDoubleValue("fileSize", FileSize);
            writer.WriteDoubleValue("folderCount", FolderCount);
            writer.WriteDoubleValue("graphRequestCount", GraphRequestCount);
            writer.WriteDoubleValue("ignoredOutOfRelativeRoot", IgnoredOutOfRelativeRoot);
            writer.WriteDoubleValue("insertedCount", InsertedCount);
            writer.WriteDoubleValue("matchedCount", MatchedCount);
            writer.WriteDoubleValue("modifiedCount", ModifiedCount);
            writer.WriteDoubleValue("totalCount", TotalCount);
            writer.WriteDoubleValue("upsertedCount", UpsertedCount);
        }
    }
}
