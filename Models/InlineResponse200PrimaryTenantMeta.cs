// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Core.Pointer.Models {
    public class InlineResponse200PrimaryTenantMeta : IParsable {
        /// <summary>Gets or Sets Colors</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<InlineResponse200PrimaryTenantMetaColors>? Colors { get; set; }
#nullable restore
#else
        public List<InlineResponse200PrimaryTenantMetaColors> Colors { get; set; }
#endif
        /// <summary>Gets or Sets Currency</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Gets or Sets DefaultCountry</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultCountry { get; set; }
#nullable restore
#else
        public string DefaultCountry { get; set; }
#endif
        /// <summary>Gets or Sets EntitiesMeta</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<InlineResponse200PrimaryTenantMetaEntitiesMeta>? EntitiesMeta { get; set; }
#nullable restore
#else
        public List<InlineResponse200PrimaryTenantMetaEntitiesMeta> EntitiesMeta { get; set; }
#endif
        /// <summary>The menusMeta property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public InlineResponse200PrimaryTenantMetaMenusMeta? MenusMeta { get; set; }
#nullable restore
#else
        public InlineResponse200PrimaryTenantMetaMenusMeta MenusMeta { get; set; }
#endif
        /// <summary>Gets or Sets SystemName</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SystemName { get; set; }
#nullable restore
#else
        public string SystemName { get; set; }
#endif
        /// <summary>Gets or Sets Tags</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The tenantExtras property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public InlineResponse200PrimaryTenantMetaTenantExtras? TenantExtras { get; set; }
#nullable restore
#else
        public InlineResponse200PrimaryTenantMetaTenantExtras TenantExtras { get; set; }
#endif
        /// <summary>Gets or Sets TenantId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId { get; set; }
#nullable restore
#else
        public string TenantId { get; set; }
#endif
        /// <summary>Gets or Sets TenantName</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantName { get; set; }
#nullable restore
#else
        public string TenantName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InlineResponse200PrimaryTenantMeta CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InlineResponse200PrimaryTenantMeta();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"colors", n => { Colors = n.GetCollectionOfObjectValues<InlineResponse200PrimaryTenantMetaColors>(InlineResponse200PrimaryTenantMetaColors.CreateFromDiscriminatorValue)?.ToList(); } },
                {"currency", n => { Currency = n.GetStringValue(); } },
                {"defaultCountry", n => { DefaultCountry = n.GetStringValue(); } },
                {"entitiesMeta", n => { EntitiesMeta = n.GetCollectionOfObjectValues<InlineResponse200PrimaryTenantMetaEntitiesMeta>(InlineResponse200PrimaryTenantMetaEntitiesMeta.CreateFromDiscriminatorValue)?.ToList(); } },
                {"menusMeta", n => { MenusMeta = n.GetObjectValue<InlineResponse200PrimaryTenantMetaMenusMeta>(InlineResponse200PrimaryTenantMetaMenusMeta.CreateFromDiscriminatorValue); } },
                {"systemName", n => { SystemName = n.GetStringValue(); } },
                {"tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"tenantExtras", n => { TenantExtras = n.GetObjectValue<InlineResponse200PrimaryTenantMetaTenantExtras>(InlineResponse200PrimaryTenantMetaTenantExtras.CreateFromDiscriminatorValue); } },
                {"tenantId", n => { TenantId = n.GetStringValue(); } },
                {"tenantName", n => { TenantName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<InlineResponse200PrimaryTenantMetaColors>("colors", Colors);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("defaultCountry", DefaultCountry);
            writer.WriteCollectionOfObjectValues<InlineResponse200PrimaryTenantMetaEntitiesMeta>("entitiesMeta", EntitiesMeta);
            writer.WriteObjectValue<InlineResponse200PrimaryTenantMetaMenusMeta>("menusMeta", MenusMeta);
            writer.WriteStringValue("systemName", SystemName);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteObjectValue<InlineResponse200PrimaryTenantMetaTenantExtras>("tenantExtras", TenantExtras);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteStringValue("tenantName", TenantName);
        }
    }
}
