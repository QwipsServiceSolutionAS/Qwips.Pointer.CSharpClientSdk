// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Announcements;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Assets;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.AzureUsers;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.BellNotifications;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.ContactPersons;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.CustomerSubscriptions;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Customers;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.DashboardPages;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Departments;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.DriveItems;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.DriveItemsCancelUpload;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.DriveItemsCreateUpload;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Employees;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.FileCollections;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Invoices;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.NumberSequences;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Products;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Projects;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Public;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SalesBudgetEntries;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SalesBudgets;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SalesOpties;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SalesOrderCategories;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SalesOrders;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SalesQuotes;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Schema;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.ServiceActivities;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.ServiceCases;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.ServiceResources;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SignableDocuments;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SimplePriceListItems;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.SimplePriceLists;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Suppliers;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.TaskCollections;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Tasks;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.Templates;
using Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item.VatGroups;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace Qwips.Core.Pointer.XrmDb.V1beta1.Tenants.Item {
    /// <summary>
    /// Builds and executes requests for operations under \xrm-db\v1beta1\tenants\{tenantId}
    /// </summary>
    public class WithTenantItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The announcements property</summary>
        public AnnouncementsRequestBuilder Announcements { get =>
            new AnnouncementsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The assets property</summary>
        public AssetsRequestBuilder Assets { get =>
            new AssetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The azureUsers property</summary>
        public AzureUsersRequestBuilder AzureUsers { get =>
            new AzureUsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bellNotifications property</summary>
        public BellNotificationsRequestBuilder BellNotifications { get =>
            new BellNotificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The contactPersons property</summary>
        public ContactPersonsRequestBuilder ContactPersons { get =>
            new ContactPersonsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The customers property</summary>
        public CustomersRequestBuilder Customers { get =>
            new CustomersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The customerSubscriptions property</summary>
        public CustomerSubscriptionsRequestBuilder CustomerSubscriptions { get =>
            new CustomerSubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dashboardPages property</summary>
        public DashboardPagesRequestBuilder DashboardPages { get =>
            new DashboardPagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The departments property</summary>
        public DepartmentsRequestBuilder Departments { get =>
            new DepartmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The driveItems property</summary>
        public DriveItemsRequestBuilder DriveItems { get =>
            new DriveItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The driveItemsCancelUpload property</summary>
        public DriveItemsCancelUploadRequestBuilder DriveItemsCancelUpload { get =>
            new DriveItemsCancelUploadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The driveItemsCreateUpload property</summary>
        public DriveItemsCreateUploadRequestBuilder DriveItemsCreateUpload { get =>
            new DriveItemsCreateUploadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The employees property</summary>
        public EmployeesRequestBuilder Employees { get =>
            new EmployeesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The fileCollections property</summary>
        public FileCollectionsRequestBuilder FileCollections { get =>
            new FileCollectionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The invoices property</summary>
        public InvoicesRequestBuilder Invoices { get =>
            new InvoicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The numberSequences property</summary>
        public NumberSequencesRequestBuilder NumberSequences { get =>
            new NumberSequencesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The products property</summary>
        public ProductsRequestBuilder Products { get =>
            new ProductsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The projects property</summary>
        public ProjectsRequestBuilder Projects { get =>
            new ProjectsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The public property</summary>
        public PublicRequestBuilder Public { get =>
            new PublicRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The salesBudgetEntries property</summary>
        public SalesBudgetEntriesRequestBuilder SalesBudgetEntries { get =>
            new SalesBudgetEntriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The salesBudgets property</summary>
        public SalesBudgetsRequestBuilder SalesBudgets { get =>
            new SalesBudgetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The salesOpties property</summary>
        public SalesOptiesRequestBuilder SalesOpties { get =>
            new SalesOptiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The salesOrderCategories property</summary>
        public SalesOrderCategoriesRequestBuilder SalesOrderCategories { get =>
            new SalesOrderCategoriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The salesOrders property</summary>
        public SalesOrdersRequestBuilder SalesOrders { get =>
            new SalesOrdersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The salesQuotes property</summary>
        public SalesQuotesRequestBuilder SalesQuotes { get =>
            new SalesQuotesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The schema property</summary>
        public SchemaRequestBuilder Schema { get =>
            new SchemaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The serviceActivities property</summary>
        public ServiceActivitiesRequestBuilder ServiceActivities { get =>
            new ServiceActivitiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The serviceCases property</summary>
        public ServiceCasesRequestBuilder ServiceCases { get =>
            new ServiceCasesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The serviceResources property</summary>
        public ServiceResourcesRequestBuilder ServiceResources { get =>
            new ServiceResourcesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The signableDocuments property</summary>
        public SignableDocumentsRequestBuilder SignableDocuments { get =>
            new SignableDocumentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The simplePriceListItems property</summary>
        public SimplePriceListItemsRequestBuilder SimplePriceListItems { get =>
            new SimplePriceListItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The simplePriceLists property</summary>
        public SimplePriceListsRequestBuilder SimplePriceLists { get =>
            new SimplePriceListsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The suppliers property</summary>
        public SuppliersRequestBuilder Suppliers { get =>
            new SuppliersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The taskCollections property</summary>
        public TaskCollectionsRequestBuilder TaskCollections { get =>
            new TaskCollectionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tasks property</summary>
        public TasksRequestBuilder Tasks { get =>
            new TasksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The templates property</summary>
        public TemplatesRequestBuilder Templates { get =>
            new TemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The vatGroups property</summary>
        public VatGroupsRequestBuilder VatGroups { get =>
            new VatGroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new WithTenantItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTenantItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/xrm-db/v1beta1/tenants/{tenantId}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WithTenantItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTenantItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/xrm-db/v1beta1/tenants/{tenantId}", rawUrl) {
        }
    }
}
